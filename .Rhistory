coord_cartesian(clip = "off") +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme
animate(predanim)
?coord_cartesian
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(alpha = .75) +
# Best fit lines
geom_abline(intercept = yint.none, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.ell, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.sped, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.both, slope = beta, size = 1, alpha = .75) +
# Pretest setup
annotation_custom(txt_pretest, xmin = pre + .1, xmax = pre + .1, ymin = min(train$posttest), ymax = min(train$posttest)) +
geom_point(data = test[test$subgroup == "None", ], aes(x = pretest, y = -Inf), color="black") +
geom_segment(aes(x = pre, xend = pre, y = -Inf, yend = yhat_none), color = "black", linetype = 2, size=.75)
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(alpha = .75) +
# Best fit lines
geom_abline(intercept = yint.none, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.ell, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.sped, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.both, slope = beta, size = 1, alpha = .75) +
# Pretest setup
annotation_custom(txt_pretest, xmin = pre, xmax = pre, ymin = min(train$posttest), ymax = min(train$posttest)) +
geom_point(data = test[test$subgroup == "None", ], aes(x = pretest, y = -Inf), color="black") +
geom_segment(aes(x = pre, xend = pre, y = -Inf, yend = yhat_none), color = "black", linetype = 2, size=.75) +
# Subgroup None
geom_segment(aes(x = pre, xend = -Inf, y = yhat_none, yend = yhat_none), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_none), color="black") +
annotation_custom(txt_yhat_none, xmin = min(train$pretest), xmax = min(train$pretest), ymin = yhat_none, ymax = yhat_none)
?annotate
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(alpha = .75) +
# Best fit lines
geom_abline(intercept = yint.none, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.ell, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.sped, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.both, slope = beta, size = 1, alpha = .75) +
# Pretest setup
annotation_custom(txt_pretest, xmin = pre, xmax = pre, ymin = min(train$posttest), ymax = min(train$posttest)) +
geom_point(data = test[test$subgroup == "None", ], aes(x = pretest, y = -Inf), color="black") +
geom_segment(aes(x = pre, xend = pre, y = -Inf, yend = yhat_none), color = "black", linetype = 2, size=.75) +
# Subgroup None
geom_segment(aes(x = pre, xend = -Inf, y = yhat_none, yend = yhat_none), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_none), color="black") +
annotation_custom(txt_yhat_none, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_none - .5, ymax = yhat_none - .5 )
ggplot(train, aes(x = pretest, y = posttest)) +
geom_point(alpha = .75, aes(color = subgroup)) +
# Best fit lines
geom_abline(intercept = yint.none, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.ell, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.sped, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.both, slope = beta, size = 1, alpha = .75) +
# Pretest setup
annotation_custom(txt_pretest, xmin = pre, xmax = pre, ymin = min(train$posttest), ymax = min(train$posttest)) +
geom_point(data = test[test$subgroup == "None", ], aes(x = pretest, y = -Inf), color="black") +
geom_segment(aes(x = pre, xend = pre, y = -Inf, yend = yhat_none), color = "black", linetype = 2, size=.75) +
# Subgroup None
geom_segment(aes(x = pre, xend = -Inf, y = yhat_none, yend = yhat_none), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_none), color="black") +
annotation_custom(txt_yhat_none, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_none - .5, ymax = yhat_none - .5 ) +
# Subgroup Both
geom_segment(aes(x = pre, xend = -Inf, y = yhat_both, yend = yhat_both), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_both), color="black") +
annotation_custom(txt_yhat_both, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_both + .5, ymax = yhat_both + .5)
ggplot(train, aes(x = pretest, y = posttest)) +
geom_point(alpha = .75, aes(color = subgroup)) +
# Best fit lines
geom_abline(intercept = yint.none, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.ell, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.sped, slope = beta, size = 1, alpha = .75) +
geom_abline(intercept = yint.both, slope = beta, size = 1, alpha = .75) +
# Pretest setup
annotation_custom(txt_pretest, xmin = pre, xmax = pre, ymin = min(train$posttest), ymax = min(train$posttest)) +
geom_point(data = test[test$subgroup == "None", ], aes(x = pretest, y = -Inf), color="black") +
geom_segment(aes(x = pre, xend = pre, y = -Inf, yend = yhat_none), color = "black", linetype = 2, size=.75) +
# Subgroup None
geom_segment(aes(x = pre, xend = -Inf, y = yhat_none, yend = yhat_none), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_none), color="black") +
annotation_custom(txt_yhat_none, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_none + .5, ymax = yhat_none + .5 ) +
# Subgroup Both
geom_segment(aes(x = pre, xend = -Inf, y = yhat_both, yend = yhat_both), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_both), color="black") +
annotation_custom(txt_yhat_both, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_both + .5, ymax = yhat_both + .5)
None
?transition_layers
predanim <-
ggplot(train, aes(x = pretest, y = posttest)) +
geom_point(alpha = .75, aes(color = subgroup)) +
# Best fit lines
geom_abline(intercept = yint.none, slope = beta, size = 1, alpha = .75, color = None) +
geom_abline(intercept = yint.ell, slope = beta, size = 1, alpha = .75, color = ELL) +
geom_abline(intercept = yint.sped, slope = beta, size = 1, alpha = .75, color = SPED) +
geom_abline(intercept = yint.both, slope = beta, size = 1, alpha = .75, color = Both) +
# Pretest setup
annotation_custom(txt_pretest, xmin = pre, xmax = pre, ymin = min(train$posttest), ymax = min(train$posttest)) +
geom_point(data = test[test$subgroup == "None", ], aes(x = pretest, y = -Inf), color="black") +
geom_segment(aes(x = pre, xend = pre, y = -Inf, yend = yhat_none), color = "black", linetype = 2, size=.75) +
# Subgroup None
geom_segment(aes(x = pre, xend = -Inf, y = yhat_none, yend = yhat_none), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_none), color="black") +
annotation_custom(txt_yhat_none, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_none + .5, ymax = yhat_none + .5 ) +
# Subgroup Both
geom_segment(aes(x = pre, xend = -Inf, y = yhat_both, yend = yhat_both), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_both), color="black") +
annotation_custom(txt_yhat_both, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_both + .5, ymax = yhat_both + .5) +
# Transitions
transition_layers(layer_length = .25,
transition_length = .25,
from_blank = TRUE,
keep_layers = c(4, Inf, Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf
) +
# Format
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme
animate(predanim)
predanim <-
ggplot(train, aes(x = pretest, y = posttest)) +
geom_point(alpha = .75, aes(color = subgroup)) +
# Best fit lines
geom_abline(intercept = yint.none, slope = beta, size = 1, alpha = .75, color = None) +
geom_abline(intercept = yint.ell, slope = beta, size = 1, alpha = .75, color = ELL) +
geom_abline(intercept = yint.sped, slope = beta, size = 1, alpha = .75, color = SPED) +
geom_abline(intercept = yint.both, slope = beta, size = 1, alpha = .75, color = Both) +
# Pretest setup
annotation_custom(txt_pretest, xmin = pre, xmax = pre, ymin = min(train$posttest), ymax = min(train$posttest)) +
geom_point(data = test[test$subgroup == "None", ], aes(x = pretest, y = -Inf), color="black") +
geom_segment(aes(x = pre, xend = pre, y = -Inf, yend = yhat_none), color = "black", linetype = 2, size=.75) +
# Subgroup None
geom_segment(aes(x = pre, xend = -Inf, y = yhat_none, yend = yhat_none), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_none), color="black") +
annotation_custom(txt_yhat_none, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_none + .5, ymax = yhat_none + .5 ) +
# Subgroup Both
geom_segment(aes(x = pre, xend = -Inf, y = yhat_both, yend = yhat_both), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_both), color="black") +
annotation_custom(txt_yhat_both, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_both + .5, ymax = yhat_both + .5) +
# Transitions
transition_layers(layer_length = .25,
transition_length = .25,
from_blank = TRUE,
keep_layers = c(4, Inf, Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf
)) +
# Format
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme
animate(predanim)
# Animate
predanim <-
ggplot(train, aes(x = pretest, y = posttest)) +
geom_point(alpha = .75, aes(color = subgroup)) +
# Best fit lines
geom_abline(intercept = yint.none, slope = beta, size = 1, alpha = .75, color = None) +
geom_abline(intercept = yint.ell, slope = beta, size = 1, alpha = .75, color = ELL) +
geom_abline(intercept = yint.sped, slope = beta, size = 1, alpha = .75, color = SPED) +
geom_abline(intercept = yint.both, slope = beta, size = 1, alpha = .75, color = Both) +
# Pretest setup
annotation_custom(txt_pretest, xmin = pre, xmax = pre, ymin = min(train$posttest), ymax = min(train$posttest)) +
geom_point(data = test[test$subgroup == "None", ], aes(x = pretest, y = -Inf), color="black") +
geom_segment(aes(x = pre, xend = pre, y = -Inf, yend = yhat_none), color = "black", linetype = 2, size=.75) +
# Subgroup None
geom_segment(aes(x = pre, xend = -Inf, y = yhat_none, yend = yhat_none), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_none), color="black") +
annotation_custom(txt_yhat_none, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_none + .5, ymax = yhat_none + .5 ) +
# Subgroup Both
geom_segment(aes(x = pre, xend = -Inf, y = yhat_both, yend = yhat_both), color = "black", linetype = 2, size = .75, arrow=arrow(length=unit(0.4,"cm"))) +
geom_point(data = test[test$subgroup == "None", ], aes(x = -Inf, y = yhat_both), color="black") +
annotation_custom(txt_yhat_both, xmin = min(train$pretest) + .5, xmax = min(train$pretest) + .5, ymin = yhat_both + .5, ymax = yhat_both + .5) +
# Transitions
transition_layers(layer_length = c(.25, 1, 1, 1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1 ),
transition_length = .25,
from_blank = TRUE,
keep_layers = c(4, Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf
)) +
# Format
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme
animate(predanim)
rm(list=ls())
require('tidyverse')
require('dplyr')
require('plyr')
rm(list=ls())
require('tidyverse')
require('dplyr')
require('ggplot2')
read_chunk("Inputs.R")
# Install packages
rm(list=ls())
packages <- c("devtools", "Rcpp", "ggplot2", "gganimate", "gapminder", "dplyr",
"installr", "animation", "tweenr", "ggforce", "plotly", "tidyr",
"MASS", "bindata", "gifski", "png", "transformr", "grid", "magick",
"gridExtra")
lapply(packages, require, character.only = TRUE)
read_chunk("Inputs.R")
packages <- c("devtools", "Rcpp", "ggplot2", "gganimate", "gapminder", "dplyr",
"installr", "animation", "tweenr", "ggforce", "plotly", "tidyr",
"MASS", "bindata", "gifski", "png", "transformr", "grid", "magick",
"gridExtra", "knitr")
lapply(packages, require, character.only = TRUE)
read_chunk("Inputs.R")
source("Inputs.R")
A<-rnorm(100,50,10)
B<-rnorm(100,50,10)
DV <- c(A,B)
IV <- rep(c("A","B"),each=100)
sims <- rep(rep(1:10,each=10),2)
df<-data.frame(sims,IV,DV)
means_df <- df %>%
group_by(sims,IV) %>%
summarize(means=mean(DV),
sem = sd(DV)/sqrt(length(DV)))
stats_df <- df %>%
group_by(sims) %>%
summarize(ts = t.test(DV~IV,var.equal=TRUE)$statistic)
stats_df
means_df <- df %>%
means_df
ggplot(means_df, aes(x = IV,y = means, fill = IV)) +
geom_bar(stat = "identity") +
geom_point(aes(x = IV, y = DV), data = df, alpha = .25) +
geom_errorbar(aes(ymin = means - sem, ymax = means + sem), width = .2) +
theme_classic() +
transition_states(
states = sims,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
a <- ggplot(means_df, aes(x = IV,y = means, fill = IV)) +
geom_bar(stat = "identity") +
geom_point(aes(x = IV, y = DV), data = df, alpha = .25) +
geom_errorbar(aes(ymin = means - sem, ymax = means + sem), width = .2) +
theme_classic() +
transition_states(
states = sims,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
a_gif <- animate(a, width = 240, height = 240)
df
min(train$pretest)
# -----------------------------------------------------------------------------#
# Program to create inputs for Student-Learning-Objectives.Rmd
# -----------------------------------------------------------------------------#
# Create dataframe
n <- 1000
rho.1 <- 0.75
rho.2 <- .5
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id=row_number(),
subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both"))) %>%
rename(pretest = X1, posttest= X2, ELL = X11, SPED = X21)
train$posttest <- ifelse(train$subgroup=="Both", train$posttest - 1.15,
ifelse(train$subgroup=="ELL", train$posttest - .65,
ifelse(train$subgroup=="SPED", train$posttest - .85, train$posttest)))
cormatrix <-
cor(train[, sapply(train, is.numeric)],
use = "complete.obs", method = "pearson")
# Train model
mod <- lm(posttest ~ pretest + ELL + SPED, train)
yint.ell <- mod$coefficients[1] + mod$coefficients[3]
yint.sped <- mod$coefficients[1] + mod$coefficients[4]
yint.none <- mod$coefficients[1]
yint.both <- mod$coefficients[1] + mod$coefficients[3] + mod$coefficients[4]
beta = mod$coefficients[2]
# Test model
pre = 0.5
test <- data.frame(id = c(1001:1004),
pretest = rep(pre, times = 4),
subgroup = c("None", "ELL", "SPED", "Both"),
ELL = c(0, 1, 0, 1),
SPED = c(0, 0, 1, 1))
test$yhat <- round(predict(mod, newdata = test), digits = 2)
packages <- c("devtools", "Rcpp", "ggplot2", "gganimate", "gapminder", "dplyr",
"installr", "animation", "tweenr", "ggforce", "plotly", "tidyr",
"MASS", "bindata", "gifski", "png", "transformr", "grid", "magick",
"gridExtra", "knitr")
lapply(packages, require, character.only = TRUE)
# Create dataframe
n <- 1000
rho.1 <- 0.75
rho.2 <- .5
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id=row_number(),
subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both"))) %>%
rename(pretest = X1, posttest= X2, ELL = X11, SPED = X21)
train$posttest <- ifelse(train$subgroup=="Both", train$posttest - 1.15,
ifelse(train$subgroup=="ELL", train$posttest - .65,
ifelse(train$subgroup=="SPED", train$posttest - .85, train$posttest)))
cormatrix <-
cor(train[, sapply(train, is.numeric)],
use = "complete.obs", method = "pearson")
# Train model
mod <- lm(posttest ~ pretest + ELL + SPED, train)
yint.ell <- mod$coefficients[1] + mod$coefficients[3]
yint.sped <- mod$coefficients[1] + mod$coefficients[4]
yint.none <- mod$coefficients[1]
yint.both <- mod$coefficients[1] + mod$coefficients[3] + mod$coefficients[4]
beta = mod$coefficients[2]
# Test model
pre = 0.5
test <- data.frame(id = c(1001:1004),
pretest = rep(pre, times = 4),
subgroup = c("None", "ELL", "SPED", "Both"),
ELL = c(0, 1, 0, 1),
SPED = c(0, 0, 1, 1))
test$yhat <- round(predict(mod, newdata = test), digits = 2)
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id=row_number(),
subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both"))) %>%
rename(pretest = X1, posttest= X2, ELL = X11, SPED = X21)
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id=row_number(),
subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both")))
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame())
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id=row_number(),
subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both")))
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id=row_number(),
subgroup = as.factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both")))
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id=row_number())
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame())
train
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id=row_number(),
subgroup = ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None")))) %>%
rename(pretest = X1, posttest= X2, ELL = X11, SPED = X21)
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id=row_number(),
subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both")))
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame())
train
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both"))) %>%
rename(pretest = X1, posttest= X2, ELL = X11, SPED = X21)
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both")))
train
names(train)
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both"))) %>%
rename(pretest = X1, posttest= X2, ELL = X11, SPED = X21)
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both"))) %>%
dplyr::rename(pretest = X1, posttest= X2, ELL = X11, SPED = X21)
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(id = row_number(), subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both"))) %>%
dplyr::rename(pretest = X1, posttest= X2, ELL = X11, SPED = X21)
train <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, rho.1, rho.1, 1), nrow = 2), empirical = TRUE) %>% data.frame() %>%
bind_cols(rmvbin(n = n, margprob = c(0.5, 0.5), bincorr = matrix(c(1, rho.2,rho.2, 1), ncol = 2)) %>% data.frame()) %>%
mutate(subgroup = factor(ifelse(X11 == 1 & X21 == 1, "Both",
ifelse(X11 == 1, "ELL",
ifelse(X21 == 1, "SPED", "None"))),
levels = c("None", "ELL", "SPED", "Both"))) %>%
dplyr::rename(pretest = X1, posttest= X2, ELL = X11, SPED = X21)
head(train)
train$posttest <- ifelse(train$subgroup=="Both", train$posttest - 1.15,
ifelse(train$subgroup=="ELL", train$posttest - .65,
ifelse(train$subgroup=="SPED", train$posttest - .85, train$posttest)))
cormatrix <-
cor(train[, sapply(train, is.numeric)],
use = "complete.obs", method = "pearson")
# Train model
mod <- lm(posttest ~ pretest + ELL + SPED, train)
yint.ell <- mod$coefficients[1] + mod$coefficients[3]
yint.sped <- mod$coefficients[1] + mod$coefficients[4]
yint.none <- mod$coefficients[1]
yint.both <- mod$coefficients[1] + mod$coefficients[3] + mod$coefficients[4]
beta = mod$coefficients[2]
# Test model
pre = 0.5
test <- data.frame(id = c(1001:1004),
pretest = rep(pre, times = 4),
subgroup = c("None", "ELL", "SPED", "Both"),
ELL = c(0, 1, 0, 1),
SPED = c(0, 0, 1, 1))
test$yhat <- round(predict(mod, newdata = test), digits = 2)
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("pretest",
"Select prior achievement score:",
min = min(train$pretest),
max = max(train$pretest),
value = 0),
radioButtons("subgroup",
"Select subgroup:",
choices = c("None", "ELL", "SPED", "Both"))
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
)
library(shiny)
shiny::runApp('Make-Goal')
source('Inputs.R')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("pretest",
"Select prior achievement score:",
min = min(train$pretest),
max = max(train$pretest),
value = 0),
radioButtons("subgroup",
"Select subgroup:",
choices = c("None", "ELL", "SPED", "Both"))
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
)
source("Inputs.R")
shiny::runApp('Make-Goal')
install.packages("httpuv")
source("Inputs.R")
shiny::runApp('Make-Goal')
install.packages("promises")
shiny::runApp('Make-Goal')
source("D:\GitHub\Animated-SLO\Inputs.R")
runApp('Make-Goal')
runApp('Make-Goal')
runApp('Make-Goal')
runApp('Make-Goal')
runApp('Make-Goal')
?textOutput
runApp('Make-Goal')
?shinyAppDir

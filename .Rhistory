ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = .5, ymin = -4, ymax = -Inf) +
coord_cartesian(clip="off")
tinaGrob <- rasterGrob(tina, interpolate = TRUE, x = unit(5, "npc"), y = unit(5, "npc"))
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = .5, ymin = -4, ymax = -Inf) +
coord_cartesian(clip="off")
tinaGrob <- rasterGrob(tina, interpolate = TRUE, x = unit(1, "npc"), y = unit(1, "npc"))
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = 1, ymin = -4, ymax = -Inf) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = 3, ymin = -4, ymax = -Inf) +
coord_cartesian(clip="off")
tinaGrob <- rasterGrob(tina, interpolate = TRUE)
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = 3, ymin = -4, ymax = -Inf) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = 3, ymin = -3, ymax = -Inf) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = 2, ymin = -2, ymax = -Inf) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = 2, ymin = -4, ymax = -Inf) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = 2, ymin = -4, ymax = -3) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = 1, ymin = -4, ymax = -3) +
coord_cartesian(clip="off")
tinaGrob <- rasterGrob(tina, interpolate = TRUE, x = unit(.5, "npc"), y = unit(.5, "npc"))
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0, xmax = 1, ymin = -4, ymax = -3) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0.5, xmax = 1, ymin = -4, ymax = -3.5) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0.5, xmax = 1.25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off")
tinaGrob <- rasterGrob(tina, interpolate = TRUE)
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(tinaGrob, xmin = 0.5, xmax = 1.25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off")
jordanGrob <- rasterGrob(jordan, interpolate = TRUE)
jordan <- readPNG("D:/GitHub/Animated-SLO/studentjordan_64bit.png")
tom <- readPNG("D:/GitHub/Animated-SLO/studenttom_64bit.png")
tina <- readPNG("D:/GitHub/Animated-SLO/studenttina_64bit.png")
jordanGrob <- rasterGrob(jordan, interpolate = TRUE)
tomGrob <- rasterGrob(tom, interpolate = TRUE)
tinaGrob <- rasterGrob(tina, interpolate = TRUE)
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = 25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off")
+
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme +
transition_layers(layer_length = 5, transition_length = 1,
# from_blank = TRUE, keep_layers = c(rep(c(2, 1, 1, 1), 4))) +
from_blank = TRUE, keep_layers = c(rep(c(3, 2, 1, 1), 4))) +
enter_fade()+
exit_fade()
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off")
+
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme +
transition_layers(layer_length = 5, transition_length = 1) +
enter_fade()+
exit_fade()
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off")
+
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off") +
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile")
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off") +
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme +
transition_layers(layer_length = 5, transition_length = 1) +
enter_fade()+
exit_fade()
tina_tom_jordan <-
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off") +
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme +
transition_layers(layer_length = 5, transition_length = 1) +
enter_fade()+
exit_fade()
tina_tom_jordan <-
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off") +
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme +
transition_layers(layer_length = 5, transition_length = 1) +
enter_fade()+
exit_fade()
animate(tina_tom_jordan, fps = 5)
tina_tom_jordan <-
ggplot(train, aes(x = pretest, y = posttest, color = subgroup)) +
geom_point(data = train[train$subgroup=="None", ], alpha = .75) +
geom_point(data = train[train$subgroup=="ELL", ], alpha = .75) +
geom_point(data = train[train$subgroup=="SPED", ], alpha = .75) +
geom_point(data = train[train$subgroup=="Both", ], alpha = .75) +
geom_abline(intercept = yint.none, slope = beta, color = None, size = 1) +
geom_abline(intercept = yint.ell, slope = beta, color = ELL, size = 1) +
geom_abline(intercept = yint.sped, slope = beta, color = SPED, size = 1) +
geom_abline(intercept = yint.both, slope = beta, color = Both, size = 1) +
annotation_custom(jordanGrob, xmin = 2, xmax = 2.75, ymin = -4, ymax = -3.25) +
annotation_custom(tomGrob, xmin = -2, xmax = -1.25, ymin = -4, ymax = -3.25) +
annotation_custom(tinaGrob, xmin = -.5, xmax = .25, ymin = -4, ymax = -3.25) +
coord_cartesian(clip="off") +
scale_colour_manual(breaks = c("None", "ELL", "SPED", "Both"), values = mycolors) +
labs(x = "Prior Achievement Score",
y = "End of Year Score",
color = "Student Profile") +
mytheme +
transition_layers(layer_length = 5, transition_length = 1) +
enter_fade()+
exit_fade()
animate(tina_tom_jordan, fps = 5)
anim_save(filename="tina_tom_jordan.gif")
# Install packages -------------------------------------------------------------
rm(list=ls())
packages <- c("devtools", "Rcpp", "ggplot2", "gganimate", "gapminder", "dplyr",
"installr", "animation", "tweenr", "ggforce", "plotly", "tidyr",
"MASS", "bindata", "gifski", "png", "transformr", "grid", "magick",
"gridExtra", "knitr", "shiny", "RCurl", "magrittr", "png", "readPNG")
lapply(packages, require, character.only = TRUE)
# Assign path to repo and import icons -----------------------------------------
work <- getwd
gitpath <- paste0(work, "/GitHub/Animated-GM")
# Assign path to repo and import icons -----------------------------------------
work <- getwd()
work
# Assign path to repo and import icons -----------------------------------------
work <- paste0(getwd())
gitpath <- paste0(work, "/GitHub/Animated-GM")
gitpath
jordanPNG <- readPNG(file.path(gitpath, "/studentjordan_64bit.png"))
jordanPNG <- readPNG(file.path(gitpath), "/studentjordan_64bit.png")
# Assign path to repo and import icons -----------------------------------------
work <- paste0(getwd())
gitpath <- paste0(work, "/GitHub/Animated-GM")
jordanPNG <- readPNG(paste0(file.path(gitpath, "/studentjordan_64bit.png")))
jordanPNG <- readPNG(paste0(file.path(gitpath, "studentjordan_64bit.png")))
work
jordanPNG <- readPNG(file.path(gitpath, "studentjordan_64bit.png"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Install packages -------------------------------------------------------------
rm(list=ls())
packages <- c("devtools", "Rcpp", "ggplot2", "gganimate", "gapminder", "dplyr",
"installr", "animation", "tweenr", "ggforce", "plotly", "tidyr",
"MASS", "bindata", "gifski", "png", "transformr", "grid", "magick",
"gridExtra", "knitr", "shiny", "RCurl", "magrittr", "png", "readPNG")
lapply(packages, require, character.only = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages("rstudioapi")
install.packages("rstudioapi")
current_path <- getActiveDocumentContext()$path
require("rstudioapi")
current_path <- getActiveDocumentContext()$path
current_path
setwd(dirname(current_path ))
# Install packages -------------------------------------------------------------
rm(list=ls())
packages <- c("devtools", "Rcpp", "ggplot2", "gganimate", "gapminder", "dplyr",
"installr", "animation", "tweenr", "ggforce", "plotly", "tidyr",
"MASS", "bindata", "gifski", "png", "transformr", "grid", "magick",
"gridExtra", "knitr", "shiny", "RCurl", "magrittr", "png", "readPNG",
"rstudioapi ")
lapply(packages, require, character.only = TRUE)
setwd(dirname(getActiveDocumentContext()$path))
current_path <- getActiveDocumentContext()$path
packages <- c("devtools", "Rcpp", "ggplot2", "gganimate", "gapminder", "dplyr",
"installr", "animation", "tweenr", "ggforce", "plotly", "tidyr",
"MASS", "bindata", "gifski", "png", "transformr", "grid", "magick",
"gridExtra", "knitr", "shiny", "RCurl", "magrittr", "png", "readPNG",
"rstudioapi")
lapply(packages, require, character.only = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
current_path <- getActiveDocumentContext()$path
setwd(file.path(current_path))
setwd(dirname(current_path))
getwd()
current_path
getActiveDocumentContext()
getActiveDocumentContext()$path
setwd("D:\GitHub\Animated-SLO")
setwd("D:\\GitHub\\Animated-SLO")
# Install packages -------------------------------------------------------------
rm(list=ls())
getwd()
?getActiveDocumentContext
getSourceEditorContext()
getActiveDocumentContext()
getConsoleEditorContext()
getActiveDocumentContext()
getSourceEditorContext()
getSourceEditorContext()$path
gsub
?gsub
current_path <- gsub(getSourceEditorContext()$path, pattern = "/Inputs.R", "")
current_path
current_path <- gsub(getSourceEditorContext()$path, pattern = "/Inputs.R", "")
current_path
current_path <- getSourceEditorContext()$path
current_path
current_path <- gsub(getSourceEditorContext()$path, pattern = "/Inputs.R", " ")
current_path
?Str_sub
?str_sub
current_path <- gsub(x = paste0(getSourceEditorContext()$path), pattern = "/Inputs.R", " ")
current_path
current_path <- gsub(x = paste0(getSourceEditorContext()$path), pattern = "/Inputs.R", "")
current_path
setwd(dirname(current_path ))
getwd()
current_path <- gsub(x = paste0(getSourceEditorContext()$path), pattern = "/Inputs.R", "")
current_path
setwd(file.path(current_path ))
getwd()
jordanPNG <- readPNG("/studentjordan_64bit.png"))
jordanPNG <- readPNG("/studentjordan_64bit.png")
jordanPNG <- readPNG("studentjordan_64bit.png")
jordanPNG <- readPNG("studentjordan_64bit.png")
tomPNG <- readPNG("studenttom_64bit.png")
tinaPNG <- readPNG("studenttina_64bit.png")
# From GitHub
require("RCurl")
inputscript <-
getURL("https://raw.githubusercontent.com/doobops/Animated-GM/master/Inputs.R", ssl.verifypeer = FALSE)
eval(parse(text = inputscript))
# Install packages -------------------------------------------------------------
rm(list=ls())
packages <- c("devtools", "Rcpp", "ggplot2", "gganimate", "gapminder", "dplyr",
"installr", "animation", "tweenr", "ggforce", "plotly", "tidyr",
"MASS", "bindata", "gifski", "png", "transformr", "grid", "magick",
"gridExtra", "knitr", "shiny", "RCurl", "magrittr", "png", "readPNG",
"rstudioapi")
lapply(packages, require, character.only = TRUE)
# Assign path to repo and import icons -----------------------------------------
current_path <- gsub(x = paste0(getSourceEditorContext()$path), pattern = "/Inputs.R", "")
setwd(file.path(current_path))
getwd()
jordanPNG <- readPNG("studentjordan_64bit.png")
tomPNG <- readPNG("studenttom_64bit.png")
tinaPNG <- readPNG("studenttina_64bit.png")
# From GitHub
require("RCurl")
inputscript <-
getURL("https://raw.githubusercontent.com/doobops/Animated-GM/master/Inputs.R", ssl.verifypeer = FALSE)
eval(parse(text = inputscript))
getwd()
# Image Grobs
jordanGrob <- rasterGrob(jordanPNG, interpolate = TRUE)
tomGrob <- rasterGrob(tomPNG, interpolate = TRUE)
tinaGrob <- rasterGrob(tinaPNG, interpolate = TRUE)
